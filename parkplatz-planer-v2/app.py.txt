from flask import Flask, render_template, request, redirect, session, url_for
from datetime import datetime, timedelta
import os

app = Flask(__name__)
app.secret_key = 'supergeheimespasswort'

# Admin Login-Daten
admin_user = "Dennis"
admin_pass = "Parkplatz135790"

# Benutzerliste
benutzer = {
    "georg": "passwort1",
    "anna": "passwort2",
    "max": "passwort3"
}

buchungen = []
parkplaetze = ["A", "B", "E", "D", "F", "C"]

# Hilfsfunktionen
def ist_frei(platz, neue_ankunft, neue_abfahrt):
    for eintrag in buchungen:
        if eintrag['platz'] == platz:
            if not (neue_abfahrt <= eintrag['ankunft'] or neue_ankunft >= eintrag['abfahrt']):
                return False
    return True

def kommende_buchungen():
    heute = datetime.now()
    ende = heute + timedelta(days=3)
    kommende = []
    for eintrag in buchungen:
        if heute <= eintrag['ankunft'] <= ende:
            kommende.append(eintrag)
    kommende.sort(key=lambda x: x['ankunft'])
    return kommende

# Routen
@app.route("/", methods=["GET", "POST"])
def index():
    if "nutzer" not in session:
        return redirect(url_for("login"))

    nutzer = session["nutzer"]
    if request.method == "POST":
    ankunft = datetime.fromisoformat(request.form['ankunft'])
    abfahrt = datetime.fromisoformat(request.form['abfahrt'])

    platz = None
    for p in parkplaetze:
        if ist_frei(p, ankunft, abfahrt):
            platz = p
            break

    if platz:
        buchungen.append({
            "name": nutzer,
            "ankunft": ankunft,
            "abfahrt": abfahrt,
            "platz": platz
        })
        session['nachricht'] = f"Reservierung erfolgreich: Parkplatz {platz}!"
    else:
        session['nachricht'] = "Kein Parkplatz verf端gbar f端r die gew端nschte Zeit."

    return redirect("/")


    kommende = kommende_buchungen()
    return render_template("index.html", buchungen=buchungen, kommende=kommende, nutzer=nutzer)

@app.route("/login", methods=["GET", "POST"])
def login():
    fehler = ""
    if request.method == "POST":
        nutzer = request.form['nutzer']
        pw = request.form['passwort']
        if (nutzer == admin_user and pw == admin_pass) or (nutzer in benutzer and benutzer[nutzer] == pw):
            session['nutzer'] = nutzer
            return redirect(url_for("index"))
        else:
            fehler = "Ung端ltige Anmeldedaten."

    return render_template("login.html", fehler=fehler)

@app.route("/logout")
def logout():
    session.clear()
    return redirect(url_for("login"))

@app.route("/admin", methods=["GET", "POST"])
def admin():
    if "nutzer" not in session or session["nutzer"] != admin_user:
        return redirect(url_for("login"))

    fehler = ""
    if request.method == "POST":
        if "neuer_benutzer" in request.form:
            neuer = request.form['neuer_benutzer']
            neues_pw = request.form['neues_passwort']
            if neuer not in benutzer:
                benutzer[neuer] = neues_pw
            else:
                fehler = "Benutzer existiert bereits."
        elif "loeschen" in request.form:
            zu_loeschen = request.form['loeschen']
            if zu_loeschen in benutzer:
                del benutzer[zu_loeschen]
        elif "aendern_benutzer" in request.form:
            benutzername = request.form['aendern_benutzer']
            neues_passwort = request.form['aendern_passwort']
            if benutzername in benutzer:
                benutzer[benutzername] = neues_passwort

    return render_template("admin.html", benutzer=benutzer, fehler=fehler)

@app.route('/manifest.json')
def manifest():
    return app.send_static_file('manifest.json')

@app.route('/service-worker.js')
def sw():
    return app.send_static_file('service-worker.js')

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
